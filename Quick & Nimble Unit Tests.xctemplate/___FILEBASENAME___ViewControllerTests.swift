//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright (c) ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import ___PROJECTNAMEASIDENTIFIER___
import Quick
import Nimble

class ___VARIABLE_sceneName___ViewControllerTests: QuickSpec {

    // MARK: Subject under test
    
    var sut: ___VARIABLE_sceneName___ViewController!
    var window: UIWindow!

    override func spec() {
        describe("The ___VARIABLE_sceneName___ ViewController") {
            beforeEach {
                self.window = UIWindow()

                let bundle = Bundle.main
                let storyboard = UIStoryboard(name: nil, bundle: bundle)
                self.sut = storyboard.instantiateViewController(withIdentifier: String(describing: ___VARIABLE_sceneName___ViewController.self)) as? ___VARIABLE_sceneName___ViewController
            }

            afterEach {
                self.window = nil
            }

            describe("on view load") {
                it("should call .... ") {
                    // Given
                    // let spy = ___VARIABLE_sceneName___BusinessLogicSpy()
                    // sut.interactor = spy

                    // When
                    // loadView()

                    // Then
                    // XCTAssertTrue(spy.doSomethingCalled, "viewDidLoad() should ask the interactor to do something")
                }
            }

            describe("on display called") {
                context("with a valid viewModel") {
                    it("should ....") {
                        // Given
                        // let viewModel = ___VARIABLE_sceneName___.Something.ViewModel()
                        
                        // When
                        // loadView()
                        // sut.displaySomething(viewModel: viewModel)
                        
                        // Then
                        //XCTAssertEqual(sut.nameTextField.text, "", "displaySomething(viewModel:) should update the name text field")
                    }
                }
            }
        }
    }
    
    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    
    class ___VARIABLE_sceneName___BusinessLogicSpy: ___VARIABLE_sceneName___BusinessLogic {
        
        // var doSomethingCalled = false
        
        // func doSomething(request: ___VARIABLE_sceneName___.Something.Request) {
        //     doSomethingCalled = true
        // }
    }
}
